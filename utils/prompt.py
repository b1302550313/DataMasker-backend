from langchain.prompts import PromptTemplate
from config import Config

# ================================================================================
# ========================敏感语句过滤器============================
# ================================================================================

sentenceFilterTemplate ="""
你是一名语言学家,你的任务是根据用户输入的句子判断该句子是否提到了{实体类型1}这几类事物或者是其中的一部分。

输出要求：
    如果输入的句子中提到了{实体类型2}或是{实体类型3}中的一部分，则输出##Yes##
    如果输入的句子内容没有提到任何{实体类型4}的内容，则输出##No##
用户输入:
    {userInput}
"""
sentenceFilterPrompt =  PromptTemplate(
    input_variables = ["实体类型1","实体类型2","实体类型3","实体类型4","userInput"],
    template = sentenceFilterTemplate
)

# ================================================================================
# ========================语义分割============================
# ================================================================================
wordCutTemplate = """
你是一个专业的中文分词器。你的任务是将输入的中文句子切分成一个个有意义的词汇单元（词）。请按照以下格式输出分词结果：

输入句子: 输入的中文句子
分词结果: [分词后的词汇单元，用,分隔]
注意，你将严格按照下面的步骤进行推理：
1、读取用户输入的句子，充分学习和发现句子中需要切分的点。
2、将用户输入的句子分解成词汇单元，这个词汇单元需要根据所在句子的成分或者词组的实际意义进行切分
3、将分好的词组按照指定列表的格式进行拆分,使其满足python的list格式,即["分词1","分词2"...]
4、确保你的输出的词组合并起来和用户的输入保持一致,并保证你的输出严格按["分词1","分词2"...]输出
5、保持信息完整，例如一个完整的地址、一家公司名称、一个日期信息、一条数据等这种信息需要保持完整而不应该继续拆分

例如：
输入句子:红豆公司是在东阳市地月区886号，他们的董事长是向华腾
输出: ["红豆公司","是在", "东阳市地月区886号","，","他们的","董事长","是","向华腾"]

下面是一些具体的实例，你需要从示例中学习分词的标准，然后把用户输入的句子按照这种标准进行合理的分词和输出：
{切词示例}

用户输入:
{userInput}
模型输出：
"""

wordCutTemplate1 = """
指令：请将给定的句子分解为语义独立且语法完整的短语或词汇，并在每个分割点插入 "#"。然后，在整个句子的开头和结尾分别插入 "##"。

分割标准：
1. 保持语义独立性：每个单元应在语义上独立完整。
2. 保持语法结构：动词短语、名词短语等应作为一个整体。
3. 单独列出连接词和标点符号。
4. 专有名词应作为一个整体。
5. 修饰词与被修饰词通常一起作为一个单元。

输入："该项目成功结题并部署到阿里巴巴内部生产环境"

期望输出：
##该项目#成功结题#并#部署到#阿里巴巴#内部#生产环境##

输入: {userInput}

期望输出:
"""

wordCutPrompt = PromptTemplate(
    input_variables = ["切词示例","userInput"],
    template = wordCutTemplate
)

wordCutPrompt1 = PromptTemplate(
    input_variables = ["userInput"],
    template = wordCutTemplate1,
)

# ================================================================================
# ========================敏感信息精确识别============================
# ================================================================================
sensitiveInfoIdentifyTemplate = """
{history}
根据##{sentence}##这句话判断, #{word}#是否是  {sensitive_type}中的某一种?
如果是某一种上面提到的,输出:##Yes##,并解释你的判断依据
如果不是,输出:##No##,然后解释原因
注意:你仅仅需要判断{word}是否是{sensitive_type}这几种类型之一
对于你的答案，你在做出最终回答之前，你需要反问自己一个问题：将{word}分类为{sensitive_type}中的某一类是不是符合认证和常理的，如果这个问题的回答是否定的，你需要重新审视一下问题然后做出你认为最正确的答案。
"""
sensitiveInfoIdentifyTemplate1 = """
#{word}#是否是  {sensitive_type}中的某一种?
如果是某一种上面提到的,输出:##Yes##,并解释你的判断依据
如果不是,输出:##No##,然后解释原因
注意:你仅仅需要判断{word}是否是{sensitive_type}这几种类型之一
"""
sensitiveIdentityDescription  = """
任务描述： 你是一个语言学家，用户会提供给你与{docType}相关的信息以及一段完整的句子
考虑用户输入在完整句子中的语义，请你判断用户输入的信息在完整的文本里面是否属于以下预定义实体类型的实例之一或者在原文中能和其前后的文字构成以下实体类型的一部分：{entity_type}。

实体识别： 对用户输入的文本进行分析，判断其是否属于指定实体类型中的一个具体的实例。
指定类型的具体实体：符合某类别的情况下，是一项具体的数据，或者是一个独特的名称，不包括笼统的数据和名称，你需要结合实际文本进行区分。这个信息很重要，你需要在做出回答前仔细判断用户输入是否满足这个要求。

判断要求及输出格式：
当实体满足以下两个条件时: 输出 ##Yes##，并回答它属于哪个实体
    ----条件一: 用户输入实体在给定文本中属于指定的类型({entity_type}之一) 或者结合其在原文附近的信息可以判断其为上述类型的一部分
    ----条件二: 用户输入的实体能明确属于xx类型,是xx类型的具体实例。
当实体不能同时满足上面两个条件时： 输出 ##No##，并简要说明原因。
这两个条件是判断用户输入是否是指定类型的具体实体，你需要在做出最终判断之前，时刻牢记这两个要求。

注意,你的输出需要满足下面的要求:
准确性： 尽量准确地识别实体类型。
可解释性： 给出判断依据，方便用户理解。
输出规范： 严格按照 ## 包裹输出内容的格式。
匿名实体特殊处理：用户输入的实体可能会做匿名化处理，如果用户输入的实体是匿名化的，你则需要判断该输入在未匿名前在完整句子中的语义，判断其是否属于上述的实体之一或者是构成上述实体的一部分。

请牢记在给出你的最终回答之前，仔细理解输入内容和输出要求和输出格式，使得你的回答能够准确可靠。
下面是一些符合上面要求的场景：
{demos}

请按照上述要求和示例继续分析如下内容：
原始语句：{sentence}
关注的词：{word}
输出：
"""

sensitiveInfoIdentifyPrompt = PromptTemplate(
    variables = ["sensitive_type","sentence","word","history"],
    template = sensitiveInfoIdentifyTemplate
)

sensitiveInfoIdentifyPrompt1 = PromptTemplate(
    variables = ["sensitive_type","word"],
    template = sensitiveInfoIdentifyTemplate1
)

sensitiveIdentifyPrompt = PromptTemplate(
    variables = ["sentence","word","entity_type","docType","demos"],
    template = sensitiveIdentityDescription
)

# 不切词进行实体识别
identity_template = """
请将 `{userInput}` 这句话中的{type}标记出来,并用##具体的{type}##在原句中标记出来,如果原句中不存在对应的{type},则直接输出原句.
"""
identity_Prompt = PromptTemplate(
    variables =["userInput","type"],
    template = identity_template,
)

# ================================================================================
# ========================敏感词替换============================
# ================================================================================
wordReplaceTemplate_v1 = """
在"{sentence}"中,{word} 这个词需要被替换成符合语境的词,你需要根据{word}在原文中的语义和类型生成一个同类型但是是一个虚构的词来替代{word}在原文中的位置
并且将且仅将你生成的替换词用##替换词##的格式输出
注意，你只能输出##替换词##,而且你需要保证使用替换词和{word}是一个类型的词,而且这个替换成不能是真实存在的,而且将替换词和{word}替换后，语句依然通顺。
"""
wordReplaceTemplate_v2 = """
在"{sentence}"中,{word} 这个词需要被匿名化,
例如如果需要匿名化的词是`小米公司`,你需要对其进行匿名化,生成一个虚构的公司名称或者将其匿名化来替换`小米公司`在原文中的位置,例如你可以生成一个公司名称成`红豆公司`或者将其匿名化如`小X公司`
现在你需要根据上面的示例将`{word}`匿名化或者生成一个替代词来替代`{word}`在原文中的位置,你需要把替换词用##包裹起来
即将你生成的替换词用##替换词##的格式输出
注意，你只能输出##替换词##,而且你需要保证生成替换词和{word}是一个类型的词,而且这个替换成不能是真实存在的,而且将替换词和{word}替换后，语句依然通顺。
"""
wordReplaceTemplate = """
在"{sentence}"中，将词"{word}"匿名化，生成一个虚构的同类型词作为替换。
替换词需满足：
类型一致（如原词为公司名，替换词也需为公司名格式）；
不可真实存在（如不能用“阿里巴巴”替换“小米公司”）；
语句通顺（替换后句子需逻辑合理）。
输出格式
仅输出替换词，用 ##替换词## 包裹，例如：
##红豆公司## 或 ##张XX##

示例
输入：
原句：小米公司是智能手机制造商。
词：小米公司

输出：##蓝鲸科技##

输入：
原句：李华毕业于清华大学。
词：李华
输出：##张X##
现在你需要继续完成推理:
输入:
原句:{sentence}
词:{word}

输出:
"""


wordReplacePrompt = PromptTemplate(
    variables = ["sentence","word"],
    template = wordReplaceTemplate
)
# ================================================================================
# ========================自我校验模块============================
# ================================================================================
selfVerifyTemplate = """
{history}
上面是用户的问题和你的回答,你觉得你的回答准确吗,你需要根据自己的判断回答
如果你认为上面的回答是符合用户的问题,请直接回答##Yes##
如果你认为上面的回答严重错误,请回答##No##
"""
selfVerifyPrompt = PromptTemplate(
    variables = ["history"],
    template = selfVerifyTemplate
)
